import { app, BrowserWindow, ipcMain, dialog } from "electron";
import { describeStoreContent } from "./store";
import { setAppMenu } from "./menu";
import type { FFmpegCommandHandlers } from "./ffmpeg/types";
import { executeFFmpegCommand, stopAll } from "./ffmpeg/ffmpeg";
import { readMetadata } from "./ffmpeg/ffprobe";
import { Channel } from "./preload/channels";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code
// (depending on whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

describeStoreContent();

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  setAppMenu();

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    title: "Alpha-Badger",
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,

      // #region security
      nodeIntegration: false,
      nodeIntegrationInWorker: false,
      nodeIntegrationInSubFrames: false,
      contextIsolation: true,
      // #endregion
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed.
app.on("window-all-closed", () => {
  // On OS X it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// #region ipcMain handlers
ipcMain.handle(Channel.Command, (event, commandArguments: string): void => {
  const handlers: FFmpegCommandHandlers = {
    handleError: (error): void => {
      mainWindow.webContents.send(Channel.FFmpeg.Error, error);
    },
    handleStart: (start): void => {
      mainWindow.webContents.send(Channel.FFmpeg.Start, start);
    },
    handleEnd: (end): void => {
      mainWindow.webContents.send(Channel.FFmpeg.End, end);
    },
    handleData: (data): void => {
      mainWindow.webContents.send(Channel.FFmpeg.Data, data);
    },
    handleProgress: (progress): void => {
      mainWindow.webContents.send(Channel.FFmpeg.Progress, progress);
    },
    handleCodecData: (codecData): void => {
      mainWindow.webContents.send(Channel.FFmpeg.CodecData, codecData);
    },
  };
  console.log("about to executeFFmpegCommand \n", commandArguments);
  executeFFmpegCommand(commandArguments, handlers);
});

ipcMain.handle(
  Channel.ReadMetadata,
  async (event, filePath: string): Promise<FFprobeJSON> => {
    return await readMetadata(filePath);
  },
);

ipcMain.handle(Channel.StopAll, (): void => {
  stopAll();
});

ipcMain.handle(
  Channel.ChooseFile,
  async (event, filters: Electron.FileFilter[]): Promise<string> => {
    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ["openFile"],
      filters,
    });
    console.log(
      result.canceled
        ? "user canceled file selection"
        : `user selected file '${result.filePaths[0]}'`,
    );

    return result.filePaths[0];
  },
);

ipcMain.handle(
  Channel.ChooseFiles,
  async (event, filters: Electron.FileFilter[]): Promise<string[]> => {
    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ["openFile", "multiSelections"],
      filters,
    });
    console.log(
      result.canceled
        ? "user canceled files selection"
        : `user selected files\n ${JSON.stringify(result.filePaths, null, 2)}`,
    );

    return result.filePaths;
  },
);

ipcMain.handle(
  Channel.ChooseFolder,
  async (/* event */): Promise<string | undefined> => {
    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ["openDirectory"],
    });
    console.log(
      result.canceled
        ? "user canceled folder selection"
        : `user selected folder ${result.filePaths[0]}`,
    );

    return result.filePaths[0];
  },
);

// #endregion
